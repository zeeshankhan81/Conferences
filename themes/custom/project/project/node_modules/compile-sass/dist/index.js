"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupCleanupOnExit = exports.compileSassAndSaveMultiple = exports.compileSassAndSave = exports.compileSass = exports.setup = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const sass_1 = __importDefault(require("sass"));
const url_1 = require("url");
const nodeEnv = process.env.NODE_ENV;
let hasSetupCleanupOnExit = false;
let _sassOptions = {};
/*
  OPTIONS: {
    sassFilePath (default: 'public/scss'),
    sassFileExt (default: 'scss'),
    embedSrcMapInProd (default: false),
    resolveTildes (default: false),
    sassOptions (default: {})
  }
*/
function setup(options) {
    const sassFilePath = options.sassFilePath || path_1.default.join(__dirname, '../public/scss/');
    const sassFileExt = options.sassFileExt || 'scss';
    const embedSrcMapInProd = options.embedSrcMapInProd || false;
    _sassOptions = options.sassOptions || {};
    if (options.resolveTildes) {
        const passedImporters = _sassOptions.importers || [];
        if (passedImporters) {
            _sassOptions.importers = [
                ...passedImporters,
                {
                    findFileUrl(url) {
                        if (!url.startsWith('~')) {
                            return null;
                        }
                        const newUrl = new URL(url.substring(1), (0, url_1.pathToFileURL)(path_1.default.join(__dirname, '..', 'node_modules')));
                        // This is a nasty workaround because pathToFileURL is not creating an absolute path despite
                        // the documentation saying it does: https://nodejs.org/docs/latest-v16.x/api/url.html#urlpathtofileurlpath
                        newUrl.href = path_1.default.join('file://', __dirname, '..', 'node_modules', url.substring(1));
                        return newUrl;
                    }
                }
            ];
        }
    }
    return function (req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const cssName = req.params.cssName.replace(/\.css/, '');
                const sassFile = path_1.default.join(sassFilePath, cssName + '.' + sassFileExt);
                const sassOptions = Object.assign({}, _sassOptions);
                if (!embedSrcMapInProd || nodeEnv !== 'production') {
                    sassOptions.sourceMap = true;
                }
                const result = yield sass_1.default.compileAsync(sassFile, sassOptions);
                if (nodeEnv === 'production') {
                    // Set Cache-Control header to one day
                    res.header('Cache-Control', 'public, max-age=86400');
                }
                res.contentType('text/css').send(result.css.toString());
            }
            catch (error) {
                throw error;
            }
        });
    };
}
exports.setup = setup;
exports.default = setup;
function compileSass(fullSassPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const sassOptions = Object.assign({}, _sassOptions);
            if (nodeEnv !== 'production') {
                sassOptions.sourceMap = true;
            }
            else {
                sassOptions.style = 'compressed';
            }
            const result = yield sass_1.default.compileAsync(fullSassPath, sassOptions);
            return result.css.toString();
        }
        catch (error) {
            console.error(error);
        }
    });
}
exports.compileSass = compileSass;
function compileSassAndSave(fullSassPath, cssPath) {
    const sassFile = fullSassPath.match(/[ \w-]+[.]+[\w]+$/)[0];
    const sassFileExt = sassFile.match(/\.[0-9a-z]+$/i)[0];
    const cssFile = sassFile.replace(sassFileExt, '.css');
    const fullCssPath = path_1.default.join(cssPath, cssFile);
    setupCleanupOnExit(cssPath);
    return compileSass(fullSassPath).then(css => {
        return fs_1.default.promises.mkdir(cssPath, { recursive: true })
            .then(() => __awaiter(this, void 0, void 0, function* () {
            try {
                yield fs_1.default.promises.writeFile(fullCssPath, css);
                return cssFile;
            }
            catch (error) {
                throw error;
            }
        })).catch(console.error);
    });
}
exports.compileSassAndSave = compileSassAndSave;
function compileSassAndSaveMultiple(options) {
    const sassPath = options.sassPath;
    const cssPath = options.cssPath;
    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
        for (const sassFile of options.files) {
            yield compileSassAndSave(path_1.default.join(sassPath, sassFile), cssPath).then(cssFile => {
                console.log('Created', cssFile);
            }).catch(error => {
                reject(error);
            });
        }
        resolve();
    })).catch(error => {
        throw new Error(error);
    });
}
exports.compileSassAndSaveMultiple = compileSassAndSaveMultiple;
function setupCleanupOnExit(cssPath) {
    if (!hasSetupCleanupOnExit) {
        process.on('SIGINT', () => {
            console.log('Exiting, running CSS cleanup');
            fs_1.default.lstat(cssPath, (error, stats) => __awaiter(this, void 0, void 0, function* () {
                if (stats.isDirectory) {
                    try {
                        yield fs_1.default.promises.rmdir(cssPath, { recursive: true });
                        console.log('Deleted CSS files');
                    }
                    catch (error) {
                        console.error(error);
                        process.exit(1);
                    }
                }
                else {
                    console.error('Could not delete CSS files because the given path is not a directory:', cssPath);
                    process.exit(1);
                }
            }));
            hasSetupCleanupOnExit = true;
        });
    }
}
exports.setupCleanupOnExit = setupCleanupOnExit;
//# sourceMappingURL=index.js.map